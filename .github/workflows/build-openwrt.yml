#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

jobs:
  build:
    name: Build ${{ matrix.name }}
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linksys-wrt1900acs-v18.06
            target: v18.06 
          - name: Linksys-wrt1900acs-v19.07
            target: v19.07

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Load Settings.ini
      run: |
        source "$GITHUB_WORKSPACE/configs/${{ matrix.target }}/setting.ini"
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "UPLOAD_PACKAGES_DIR=${UPLOAD_PACKAGES_DIR}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE=${UPLOAD_FIRMWARE}" >> $GITHUB_ENV
        echo "UPLOAD_RELEASE=${UPLOAD_RELEASE}" >> $GITHUB_ENV
        echo "TZ=${TZ}" >> $GITHUB_ENV

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync
        sudo -E apt-get -qq install libc-dev gcc perl make
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        chmod +x configs/${{ matrix.target }}/custom-feeds.sh
        cd openwrt
        $GITHUB_WORKSPACE/configs/${{ matrix.target }}/custom-feeds.sh

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Update golang and upx
      run: |
        cd openwrt
        
        curl https://codeload.github.com/openwrt/packages/tar.gz/d5dc30fe8039e2c969443fc4024f4871b7a9c2f3 | \
          tar -xz -C "feeds/packages/lang" --strip=2 packages-d5dc30fe8039e2c969443fc4024f4871b7a9c2f3/lang/golang
        
        git clone -b master --depth 1 https://github.com/kuoruan/openwrt-upx.git package/openwrt-upx

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e configs/${{ matrix.target }}/files ] && mv configs/${{ matrix.target }}/files openwrt/files
        [ -e configs/${{ matrix.target }}/.config ] && mv configs/${{ matrix.target }}/.config openwrt/.config
        chmod +x configs/${{ matrix.target }}/custom-config.sh
        cd openwrt
        $GITHUB_WORKSPACE/configs/${{ matrix.target }}/custom-config.sh

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Organize files
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        mv openwrt/.config ${{ matrix.name }}.config
        cd openwrt/bin/targets/*/*
        mv packages built-in
        mv built-in  ../../../packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Upload packages directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_PACKAGES_DIR == 'true'
      with:
        name: ${{ env.DEVICE_NAME }}-${{ matrix.target }}-packages
        path: openwrt/bin/packages

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: ${{ env.DEVICE_NAME }}-${{ matrix.target }}-firmware
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y%m%d%H")-${{ matrix.name }}"
        echo "::set-output name=status::success"

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        files: | 
          ${{ env.FIRMWARE }}/*
          ${{ matrix.name }}.config

    - name: Remove old Artifacts
      uses: c-hive/gha-remove-artifacts@v1.2.0
      with:
        age: '1 day'
        skip-recent: 2

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 4
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
